// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  role                     Roles  @default(basic)
  passwordHash             String
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 

enum Roles {
  basic
  admin
}



// Business models
model Universite {
  idUniver Int      @id @default(autoincrement())
  nomUniver String
  memoires Book[]
}


model Book {
  id          Int        @id @default(autoincrement())
  title       String
  overseer   String
  author      String
  createdAt   DateTime  @default(now())
  creationYear        String 
  pageCount  Int
  university  Universite @relation(fields: [universiteId], references: [idUniver])
  universiteId Int
  summary    String  @default("")
  pdfFile  String
  pricingModel BookPricingModel  @default(Free)
  price        Int
  cycle       Cycle      @relation(fields: [cycleId], references: [id])
  cycleId     Int
  filiere     Filiere    @relation(fields: [filiereId], references: [id])
  filiereId   Int

  downloadUnits downloadUnit[]
}


model Cycle {
  id     Int       @id @default(autoincrement())
  name    String
  books Book[]
}

model Filiere {
  id    Int       @id @default(autoincrement())
  name   String
  books Book[]
}

model downloadUnit {
  id        Int      @id @default(autoincrement())
  createdAt      DateTime
  book    Book   @relation(fields: [bookId], references: [id])
  bookId  Int
  payment  payment @relation(fields: [paymentId], references: [id])
  paymentId Int
}

model payment {
  id     Int          @id @default(autoincrement())
  createdAt   DateTime
  amount String
  paymentMethod   String
  downloadUnits downloadUnit[]
}

enum BookPricingModel {
  Free
  Paid
}
